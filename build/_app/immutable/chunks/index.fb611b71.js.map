{"version":3,"file":"index.fb611b71.js","sources":["../../../../../../src/lib/apis/ollama/index.ts","../../../../../../src/lib/apis/openai/index.ts"],"sourcesContent":["import { OLLAMA_API_BASE_URL } from '$lib/constants';\r\nimport { titleGenerationTemplate } from '$lib/utils';\r\n\r\nexport const getOllamaConfig = async (token: string = '') => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/config`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const updateOllamaConfig = async (token: string = '', enable_ollama_api: boolean) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/config/update`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tenable_ollama_api: enable_ollama_api\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const getOllamaUrls = async (token: string = '') => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/urls`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res.OLLAMA_BASE_URLS;\r\n};\r\n\r\nexport const updateOllamaUrls = async (token: string = '', urls: string[]) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/urls/update`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\turls: urls\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res.OLLAMA_BASE_URLS;\r\n};\r\n\r\nexport const getOllamaVersion = async (token: string, urlIdx?: number) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/api/version${urlIdx ? `/${urlIdx}` : ''}`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res?.version ?? false;\r\n};\r\n\r\nexport const getOllamaModels = async (token: string = '') => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/api/tags`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn (res?.models ?? [])\r\n\t\t.map((model) => ({ id: model.model, name: model.name ?? model.model, ...model }))\r\n\t\t.sort((a, b) => {\r\n\t\t\treturn a.name.localeCompare(b.name);\r\n\t\t});\r\n};\r\n\r\n// TODO: migrate to backend\r\nexport const generateTitle = async (\r\n\ttoken: string = '',\r\n\ttemplate: string,\r\n\tmodel: string,\r\n\tprompt: string\r\n) => {\r\n\tlet error = null;\r\n\r\n\ttemplate = titleGenerationTemplate(template, prompt);\r\n\r\n\tconsole.log(template);\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/api/generate`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tmodel: model,\r\n\t\t\tprompt: template,\r\n\t\t\tstream: false,\r\n\t\t\toptions: {\r\n\t\t\t\t// Restrict the number of tokens generated to 50\r\n\t\t\t\tnum_predict: 50\r\n\t\t\t}\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res?.response.replace(/[\"']/g, '') ?? 'New Chat';\r\n};\r\n\r\nexport const generatePrompt = async (token: string = '', model: string, conversation: string) => {\r\n\tlet error = null;\r\n\r\n\tif (conversation === '') {\r\n\t\tconversation = '[no existing conversation]';\r\n\t}\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/api/generate`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tmodel: model,\r\n\t\t\tprompt: `Conversation:\r\n\t\t\t${conversation}\r\n\r\n\t\t\tAs USER in the conversation above, your task is to continue the conversation. Remember, Your responses should be crafted as if you're a human conversing in a natural, realistic manner, keeping in mind the context and flow of the dialogue. Please generate a fitting response to the last message in the conversation, or if there is no existing conversation, initiate one as a normal person would.\r\n\t\t\t\r\n\t\t\tResponse:\r\n\t\t\t`\r\n\t\t})\r\n\t}).catch((err) => {\r\n\t\tconsole.log(err);\r\n\t\tif ('detail' in err) {\r\n\t\t\terror = err.detail;\r\n\t\t}\r\n\t\treturn null;\r\n\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const generateEmbeddings = async (token: string = '', model: string, text: string) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/api/embeddings`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tmodel: model,\r\n\t\t\tprompt: text\r\n\t\t})\r\n\t}).catch((err) => {\r\n\t\terror = err;\r\n\t\treturn null;\r\n\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const generateTextCompletion = async (token: string = '', model: string, text: string) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/api/generate`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tmodel: model,\r\n\t\t\tprompt: text,\r\n\t\t\tstream: true\r\n\t\t})\r\n\t}).catch((err) => {\r\n\t\terror = err;\r\n\t\treturn null;\r\n\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const generateChatCompletion = async (token: string = '', body: object) => {\r\n\tlet controller = new AbortController();\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/api/chat`, {\r\n\t\tsignal: controller.signal,\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify(body)\r\n\t}).catch((err) => {\r\n\t\terror = err;\r\n\t\treturn null;\r\n\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn [res, controller];\r\n};\r\n\r\nexport const createModel = async (\r\n\ttoken: string,\r\n\ttagName: string,\r\n\tcontent: string,\r\n\turlIdx: string | null = null\r\n) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(\r\n\t\t`${OLLAMA_API_BASE_URL}/api/create${urlIdx !== null ? `/${urlIdx}` : ''}`,\r\n\t\t{\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\tAccept: 'application/json',\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\tname: tagName,\r\n\t\t\t\tmodelfile: content\r\n\t\t\t})\r\n\t\t}\r\n\t).catch((err) => {\r\n\t\terror = err;\r\n\t\treturn null;\r\n\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const deleteModel = async (token: string, tagName: string, urlIdx: string | null = null) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(\r\n\t\t`${OLLAMA_API_BASE_URL}/api/delete${urlIdx !== null ? `/${urlIdx}` : ''}`,\r\n\t\t{\r\n\t\t\tmethod: 'DELETE',\r\n\t\t\theaders: {\r\n\t\t\t\tAccept: 'application/json',\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\tname: tagName\r\n\t\t\t})\r\n\t\t}\r\n\t)\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.then((json) => {\r\n\t\t\tconsole.log(json);\r\n\t\t\treturn true;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\terror = err;\r\n\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const pullModel = async (token: string, tagName: string, urlIdx: string | null = null) => {\r\n\tlet error = null;\r\n\tconst controller = new AbortController();\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/api/pull${urlIdx !== null ? `/${urlIdx}` : ''}`, {\r\n\t\tsignal: controller.signal,\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tname: tagName\r\n\t\t})\r\n\t}).catch((err) => {\r\n\t\tconsole.log(err);\r\n\t\terror = err;\r\n\r\n\t\tif ('detail' in err) {\r\n\t\t\terror = err.detail;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t});\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\treturn [res, controller];\r\n};\r\n\r\nexport const downloadModel = async (\r\n\ttoken: string,\r\n\tdownload_url: string,\r\n\turlIdx: string | null = null\r\n) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(\r\n\t\t`${OLLAMA_API_BASE_URL}/models/download${urlIdx !== null ? `/${urlIdx}` : ''}`,\r\n\t\t{\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\tAccept: 'application/json',\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\turl: download_url\r\n\t\t\t})\r\n\t\t}\r\n\t).catch((err) => {\r\n\t\tconsole.log(err);\r\n\t\terror = err;\r\n\r\n\t\tif ('detail' in err) {\r\n\t\t\terror = err.detail;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t});\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\treturn res;\r\n};\r\n\r\nexport const uploadModel = async (token: string, file: File, urlIdx: string | null = null) => {\r\n\tlet error = null;\r\n\r\n\tconst formData = new FormData();\r\n\tformData.append('file', file);\r\n\r\n\tconst res = await fetch(\r\n\t\t`${OLLAMA_API_BASE_URL}/models/upload${urlIdx !== null ? `/${urlIdx}` : ''}`,\r\n\t\t{\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t\t},\r\n\t\t\tbody: formData\r\n\t\t}\r\n\t).catch((err) => {\r\n\t\tconsole.log(err);\r\n\t\terror = err;\r\n\r\n\t\tif ('detail' in err) {\r\n\t\t\terror = err.detail;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t});\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\treturn res;\r\n};\r\n\r\n// export const pullModel = async (token: string, tagName: string) => {\r\n// \treturn await fetch(`${OLLAMA_API_BASE_URL}/pull`, {\r\n// \t\tmethod: 'POST',\r\n// \t\theaders: {\r\n// \t\t\t'Content-Type': 'text/event-stream',\r\n// \t\t\tAuthorization: `Bearer ${token}`\r\n// \t\t},\r\n// \t\tbody: JSON.stringify({\r\n// \t\t\tname: tagName\r\n// \t\t})\r\n// \t});\r\n// };\r\n","import { OPENAI_API_BASE_URL } from '$lib/constants';\r\nimport { titleGenerationTemplate } from '$lib/utils';\r\nimport { type Model, models, settings } from '$lib/stores';\r\n\r\nexport const getOpenAIConfig = async (token: string = '') => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/config`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const updateOpenAIConfig = async (token: string = '', enable_openai_api: boolean) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/config/update`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tenable_openai_api: enable_openai_api\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const getOpenAIUrls = async (token: string = '') => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/urls`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res.OPENAI_API_BASE_URLS;\r\n};\r\n\r\nexport const updateOpenAIUrls = async (token: string = '', urls: string[]) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/urls/update`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\turls: urls\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res.OPENAI_API_BASE_URLS;\r\n};\r\n\r\nexport const getOpenAIKeys = async (token: string = '') => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/keys`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res.OPENAI_API_KEYS;\r\n};\r\n\r\nexport const updateOpenAIKeys = async (token: string = '', keys: string[]) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/keys/update`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tkeys: keys\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res.OPENAI_API_KEYS;\r\n};\r\n\r\nexport const getOpenAIModels = async (token: string, urlIdx?: number) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(\r\n\t\t`${OPENAI_API_BASE_URL}/models${typeof urlIdx === 'number' ? `/${urlIdx}` : ''}`,\r\n\t\t{\r\n\t\t\tmethod: 'GET',\r\n\t\t\theaders: {\r\n\t\t\t\tAccept: 'application/json',\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t\t}\r\n\t\t}\r\n\t)\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\terror = `OpenAI: ${err?.error?.message ?? 'Network Problem'}`;\r\n\t\t\treturn [];\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const getOpenAIModelsDirect = async (\r\n\tbase_url: string = 'https://api.openai.com/v1',\r\n\tapi_key: string = ''\r\n) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${base_url}/models`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${api_key}`\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\terror = `OpenAI: ${err?.error?.message ?? 'Network Problem'}`;\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tconst models = Array.isArray(res) ? res : res?.data ?? null;\r\n\r\n\treturn models\r\n\t\t.map((model) => ({ id: model.id, name: model.name ?? model.id, external: true }))\r\n\t\t.filter((model) => (base_url.includes('openai') ? model.name.includes('gpt') : true))\r\n\t\t.sort((a, b) => {\r\n\t\t\treturn a.name.localeCompare(b.name);\r\n\t\t});\r\n};\r\n\r\nexport const generateOpenAIChatCompletion = async (\r\n\ttoken: string = '',\r\n\tbody: object,\r\n\turl: string = OPENAI_API_BASE_URL\r\n): Promise<[Response | null, AbortController]> => {\r\n\tconst controller = new AbortController();\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${url}/chat/completions`, {\r\n\t\tsignal: controller.signal,\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAuthorization: `Bearer ${token}`,\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t},\r\n\t\tbody: JSON.stringify(body)\r\n\t}).catch((err) => {\r\n\t\tconsole.log(err);\r\n\t\terror = err;\r\n\t\treturn null;\r\n\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn [res, controller];\r\n};\r\n\r\nexport const synthesizeOpenAISpeech = async (\r\n\ttoken: string = '',\r\n\tspeaker: string = 'alloy',\r\n\ttext: string = '',\r\n\tmodel: string = 'tts-1'\r\n) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/audio/speech`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAuthorization: `Bearer ${token}`,\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tmodel: model,\r\n\t\t\tinput: text,\r\n\t\t\tvoice: speaker\r\n\t\t})\r\n\t}).catch((err) => {\r\n\t\tconsole.log(err);\r\n\t\terror = err;\r\n\t\treturn null;\r\n\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const generateTitle = async (\r\n\ttoken: string = '',\r\n\ttemplate: string,\r\n\tmodel: string,\r\n\tprompt: string,\r\n\tchat_id?: string,\r\n\turl: string = OPENAI_API_BASE_URL\r\n) => {\r\n\tlet error = null;\r\n\r\n\ttemplate = titleGenerationTemplate(template, prompt);\r\n\r\n\tconsole.log(template);\r\n\r\n\tconst res = await fetch(`${url}/chat/completions`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tmodel: model,\r\n\t\t\tmessages: [\r\n\t\t\t\t{\r\n\t\t\t\t\trole: 'user',\r\n\t\t\t\t\tcontent: template\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tstream: false,\r\n\t\t\t// Restricting the max tokens to 50 to avoid long titles\r\n\t\t\tmax_tokens: 50,\r\n\t\t\t...(chat_id && { chat_id: chat_id }),\r\n\t\t\ttitle: true\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res?.choices[0]?.message?.content.replace(/[\"']/g, '') ?? 'New Chat';\r\n};\r\n\r\nexport const generateSearchQuery = async (\r\n\ttoken: string = '',\r\n\tmodel: string,\r\n\tpreviousMessages: string[],\r\n\tprompt: string,\r\n\turl: string = OPENAI_API_BASE_URL\r\n): Promise<string | undefined> => {\r\n\tlet error = null;\r\n\r\n\t// TODO: Allow users to specify the prompt\r\n\t// Get the current date in the format \"January 20, 2024\"\r\n\tconst currentDate = new Intl.DateTimeFormat('en-US', {\r\n\t\tyear: 'numeric',\r\n\t\tmonth: 'long',\r\n\t\tday: '2-digit'\r\n\t}).format(new Date());\r\n\r\n\tconst res = await fetch(`${url}/chat/completions`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tmodel: model,\r\n\t\t\t// Few shot prompting\r\n\t\t\tmessages: [\r\n\t\t\t\t{\r\n\t\t\t\t\trole: 'assistant',\r\n\t\t\t\t\tcontent: `You are tasked with generating web search queries. Give me an appropriate query to answer my question for google search. Answer with only the query. Today is ${currentDate}.`\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\trole: 'user',\r\n\t\t\t\t\tcontent: prompt\r\n\t\t\t\t}\r\n\t\t\t\t// {\r\n\t\t\t\t// \trole: 'user',\r\n\t\t\t\t// \tcontent:\r\n\t\t\t\t// \t\t(previousMessages.length > 0\r\n\t\t\t\t// \t\t\t? `Previous Questions:\\n${previousMessages.join('\\n')}\\n\\n`\r\n\t\t\t\t// \t\t\t: '') + `Current Question: ${prompt}`\r\n\t\t\t\t// }\r\n\t\t\t],\r\n\t\t\tstream: false,\r\n\t\t\t// Restricting the max tokens to 30 to avoid long search queries\r\n\t\t\tmax_tokens: 30\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t}\r\n\t\t\treturn undefined;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res?.choices[0]?.message?.content.replace(/[\"']/g, '') ?? undefined;\r\n};\r\n"],"names":["getOllamaConfig","token","error","res","OLLAMA_API_BASE_URL","err","updateOllamaConfig","enable_ollama_api","getOllamaUrls","updateOllamaUrls","urls","getOllamaVersion","urlIdx","generateChatCompletion","body","controller","createModel","tagName","content","deleteModel","json","pullModel","getOpenAIConfig","OPENAI_API_BASE_URL","updateOpenAIConfig","enable_openai_api","getOpenAIUrls","updateOpenAIUrls","getOpenAIKeys","updateOpenAIKeys","keys","getOpenAIModels","_a","generateOpenAIChatCompletion","url","generateTitle","template","model","prompt","chat_id","titleGenerationTemplate","_b","generateSearchQuery","previousMessages","currentDate"],"mappings":"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"}