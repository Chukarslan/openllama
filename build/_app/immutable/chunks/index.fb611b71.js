import{x as s,O as c}from"./index.69ad1154.js";import"./sha256.8dba905a.js";import{l as d}from"./index.b3b584e7.js";const g=async(a="")=>{let o=null;const e=await fetch(`${s}/config`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(console.log(t),"detail"in t?o=t.detail:o="Server connection failed",null));if(o)throw o;return e},j=async(a="",o)=>{let e=null;const t=await fetch(`${s}/config/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}},body:JSON.stringify({enable_ollama_api:o})}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).catch(n=>(console.log(n),"detail"in n?e=n.detail:e="Server connection failed",null));if(e)throw e;return t},A=async(a="")=>{let o=null;const e=await fetch(`${s}/urls`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(console.log(t),"detail"in t?o=t.detail:o="Server connection failed",null));if(o)throw o;return e.OLLAMA_BASE_URLS},m=async(a="",o)=>{let e=null;const t=await fetch(`${s}/urls/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}},body:JSON.stringify({urls:o})}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).catch(n=>(console.log(n),"detail"in n?e=n.detail:e="Server connection failed",null));if(e)throw e;return t.OLLAMA_BASE_URLS},$=async(a,o)=>{let e=null;const t=await fetch(`${s}/api/version${o?`/${o}`:""}`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}}}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).catch(n=>(console.log(n),"detail"in n?e=n.detail:e="Server connection failed",null));if(e)throw e;return(t==null?void 0:t.version)??!1},S=async(a="",o)=>{let e=new AbortController,t=null;const n=await fetch(`${s}/api/chat`,{signal:e.signal,method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${a}`},body:JSON.stringify(o)}).catch(i=>(t=i,null));if(t)throw t;return[n,e]},O=async(a,o,e,t=null)=>{let n=null;const i=await fetch(`${s}/api/create${t!==null?`/${t}`:""}`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${a}`},body:JSON.stringify({name:o,modelfile:e})}).catch(l=>(n=l,null));if(n)throw n;return i},T=async(a,o,e=null)=>{let t=null;const n=await fetch(`${s}/api/delete${e!==null?`/${e}`:""}`,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${a}`},body:JSON.stringify({name:o})}).then(async i=>{if(!i.ok)throw await i.json();return i.json()}).then(i=>(console.log(i),!0)).catch(i=>(console.log(i),t=i,"detail"in i&&(t=i.detail),null));if(t)throw t;return n},C=async(a,o,e=null)=>{let t=null;const n=new AbortController,i=await fetch(`${s}/api/pull${e!==null?`/${e}`:""}`,{signal:n.signal,method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${a}`},body:JSON.stringify({name:o})}).catch(l=>(console.log(l),t=l,"detail"in l&&(t=l.detail),null));if(t)throw t;return[i,n]},B=async(a="")=>{let o=null;const e=await fetch(`${c}/config`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(console.log(t),"detail"in t?o=t.detail:o="Server connection failed",null));if(o)throw o;return e},E=async(a="",o)=>{let e=null;const t=await fetch(`${c}/config/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}},body:JSON.stringify({enable_openai_api:o})}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).catch(n=>(console.log(n),"detail"in n?e=n.detail:e="Server connection failed",null));if(e)throw e;return t},P=async(a="")=>{let o=null;const e=await fetch(`${c}/urls`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(console.log(t),"detail"in t?o=t.detail:o="Server connection failed",null));if(o)throw o;return e.OPENAI_API_BASE_URLS},_=async(a="",o)=>{let e=null;const t=await fetch(`${c}/urls/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}},body:JSON.stringify({urls:o})}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).catch(n=>(console.log(n),"detail"in n?e=n.detail:e="Server connection failed",null));if(e)throw e;return t.OPENAI_API_BASE_URLS},b=async(a="")=>{let o=null;const e=await fetch(`${c}/keys`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(console.log(t),"detail"in t?o=t.detail:o="Server connection failed",null));if(o)throw o;return e.OPENAI_API_KEYS},z=async(a="",o)=>{let e=null;const t=await fetch(`${c}/keys/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}},body:JSON.stringify({keys:o})}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).catch(n=>(console.log(n),"detail"in n?e=n.detail:e="Server connection failed",null));if(e)throw e;return t.OPENAI_API_KEYS},N=async(a,o)=>{let e=null;const t=await fetch(`${c}/models${typeof o=="number"?`/${o}`:""}`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}}}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).catch(n=>{var i;return e=`OpenAI: ${((i=n==null?void 0:n.error)==null?void 0:i.message)??"Network Problem"}`,[]});if(e)throw e;return t},v=async(a="",o,e=c)=>{const t=new AbortController;let n=null;const i=await fetch(`${e}/chat/completions`,{signal:t.signal,method:"POST",headers:{Authorization:`Bearer ${a}`,"Content-Type":"application/json"},body:JSON.stringify(o)}).catch(l=>(console.log(l),n=l,null));if(n)throw n;return[i,t]},I=async(a="",o,e,t,n,i=c)=>{var p,u;let l=null;o=d(o,t),console.log(o);const h=await fetch(`${i}/chat/completions`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${a}`},body:JSON.stringify({model:e,messages:[{role:"user",content:o}],stream:!1,max_tokens:50,...n&&{chat_id:n},title:!0})}).then(async r=>{if(!r.ok)throw await r.json();return r.json()}).catch(r=>(console.log(r),"detail"in r&&(l=r.detail),null));if(l)throw l;return((u=(p=h==null?void 0:h.choices[0])==null?void 0:p.message)==null?void 0:u.content.replace(/["']/g,""))??"New Chat"},L=async(a="",o,e,t,n=c)=>{var p,u;let i=null;const l=new Intl.DateTimeFormat("en-US",{year:"numeric",month:"long",day:"2-digit"}).format(new Date),h=await fetch(`${n}/chat/completions`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${a}`},body:JSON.stringify({model:o,messages:[{role:"assistant",content:`You are tasked with generating web search queries. Give me an appropriate query to answer my question for google search. Answer with only the query. Today is ${l}.`},{role:"user",content:t}],stream:!1,max_tokens:30})}).then(async r=>{if(!r.ok)throw await r.json();return r.json()}).catch(r=>{console.log(r),"detail"in r&&(i=r.detail)});if(i)throw i;return((u=(p=h==null?void 0:h.choices[0])==null?void 0:p.message)==null?void 0:u.content.replace(/["']/g,""))??void 0};export{g as a,A as b,O as c,P as d,b as e,N as f,$ as g,B as h,z as i,m as j,j as k,E as l,S as m,v as n,I as o,L as p,C as q,T as r,_ as u};
//# sourceMappingURL=index.fb611b71.js.map
